{"records":[{"@type":"d","@rid":"#6:2","@version":239,"@class":"OFunction","idempotent":false,"code":"/**\u000a * 1. Use ODB WebStudio Function Management (FM)\u000a * 2. Create a function AddEvent with two parameters: classname, jsondata\u000a * 3. Paste the codes below into the FM's editor & save  \u000a */\u000avar db = orient.getDatabase();\u000a\u000a// edge class look up table to minimize repeated queries; vertex-class to edge-class\u000avar edgeLookup = {'ProcessTerminate':'Terminated', 'PipeCreated':'CreatedPipe',\u000a                'PipeConnected':'ConnectedPipe', 'RawAccessRead':'RawRead',\u000a                'FileCreateTime':'ChangedFileCreateTime', 'FileCreate':'CreatedFile',\u000a                'FileCreateStreamHash':'CreatedFileStream', 'RegistryEvent':'AccessedRegistry',\u000a                'NetworkConnect':'ConnectedTo', 'ImageLoad':'LoadedImage'}\u000a\u000a// EventId to Classname\u000avar eventIdLookup = {1:'ProcessCreate', 2:'FileCreateTime', 3:'NetworkConnect', \u000a                    4:'SysmonStatus', 5:'ProcessTerminate',6:'DriverLoad', \u000a                    7:'ImageLoad', 8:'CreateRemoteThread', 9:'RawAccessRead', \u000a                    10:'ProcessAccess', 11:'FileCreate', 12:'RegistryEvent', \u000a                    13:'RegistryEvent', 14:'RegistryEvent', 15:'FileCreateStreamHash', \u000a                    16:'ConfigChanged', 17:'PipeCreated', 18:'PipeConnected', \u000a                    19:'WmiEvent', 20:'WmiEvent', 21:'WmiEvent', 255:'Error' }\u000a\u000a// fix issue #104 - illegal field names\u000afunction rewriteProperties(obj) {\u000a  var notValid = /[\\W_]+/g\u000a  if (typeof obj !== \"object\") return obj; //that is not a typo, it checks value & type\u000a  for (var prop in obj) {\u000a      if (obj.hasOwnProperty(prop)) {\u000a          obj[prop.replace(notValid, \"\")] = rewriteProperties(obj[prop]);\u000a          if (notValid.test(prop)) {\u000a              delete obj[prop];\u000a          }\u000a      }\u000a  }\u000a  return obj;\u000a}                       \u000a\u000afunction retry(command){\u000a    try {\u000a        eval(command) \u000a    }\u000a    catch(err){\u000a        var e = '' + err\u000a        if(e.indexOf('UPDATE') > 0) {\u000a            print('Retrying ' + command)\u000a            retry(command)\u000a        }\u000a      \u0009else {\u000a          db.command('INSERT INTO Errors Set Command = ?, Message = ?',command, e)\u000a          print('Failed: ' + command + ' | Error: ' + e)\u000a       }\u000a    }\u000a}\u000a\u000afunction checkSpoof(e, rid){\u000a    var spoof = db.query('SELECT @rid, TrueParentProcessId FROM SpoofParentProcessId Where ToBeProcessed = true \\\u000a\u0009\u0009\u0009\u0009\u0009\u0009\u0009 AND Hostname = ? AND ProcessGuid = ?', e['Hostname'], e['ProcessGuid']);\u000a    if(spoof.length > 0) {\u000a    \u0009print('found spoof for ' + rid + ' true parentPID = ' + spoof[0].getProperty('TrueParentProcessId'))//SpoofedParentProcess\u000a        retry(\"db.command('CREATE EDGE SpoofedParentProcess FROM \" + spoof[0].getProperty('@rid') + \" to \" + rid + \"')\")\u000a        var trueParent = db.query('SELECT FROM ProcessCreate WHERE ProcessId = ? order by id desc limit 1', spoof[0].getProperty('TrueParentProcessId') )\u000a        if(trueParent.length > 0) {\u000a            retry(\"db.command('CREATE EDGE TrueParentOf FROM \" + trueParent[0].getProperty('@rid') + \" to \" + rid + \"')\")\u000a        }\u000a        \u000a\u0009}   \u000a}\u000a\u000afunction checkForeign(e, pc_rid, classname, insertSQL) {\u000a  \u0009var foreign = db.query('SELECT @rid FROM UntrustedFile Where ToBeProcessed = true \\\u000a\u0009\u0009\u0009\u0009\u0009  AND Type = ? AND Hostname = ? AND ProcessGuid = ?', \u000a                      classname, e['Hostname'], e['ProcessGuid']);\u000a    \u000a\u0009if(foreign.length > 0){\u000a        if(insertSQL.length >0) {\u000a        \u0009var dll = db.command(insertSQL);\u000a            pc_rid = dll[0].getProperty('@rid');\u000a        }\u000a    \u0009var edgename = classname == 'ProcessCreate' ? \"ExeSighted\" : \"DllSighted\";\u000a        retry(\"db.command('CREATE EDGE \" + edgename + \" FROM \" + foreign[0].getProperty('@rid') +\" TO \" + pc_rid + \"')\")\u000a        retry(\"db.command('UPDATE \" + foreign[0].getProperty('@rid') +\" SET ToBeProcessed = false')\")\u000a        print('Link '+ edgename + ' from ' + foreign[0].getProperty('@rid') + ' to ' + pc_rid)\u000a        if(classname == 'ImageLoad') db.query('Select ImageLoad(?)',pc_rid)\u000a    }\u000a}\u000a\u000a\u000avar logline = unescape(jsondata)\u000avar e = null\u000atry {\u000a  e = rewriteProperties(JSON.parse(logline)); \u000a}\u000acatch(err) {\u000a   print(Date() + ' Offending line ' + logline);\u000a   db.command('INSERT INTO FailedJSON SET line = ?', logline)\u000a   return\u000a}\u000a\u000ae['ToBeProcessed'] = true\u000aclassname = 'WinEvent'\u000a\u000a// This Keywords field is a huge negative number that breaks record insertion\u000aif(e['Keywords'] != undefined) {\u000a    e['Keywords'] = '' + e['Keywords'] // turn it to string\u000a}\u000a\u000a// Pre-process Sysmon events\u000aif(e[\"SourceName\"] == \"Microsoft-Windows-Sysmon\"){\u000a    classname = eventIdLookup[e['EventID']]\u000a    e['SysmonProcessId'] = e['ProcessID']\u000a    delete e['ProcessID']\u000a    var re = /ProcessId: (\\d+)/g\u000a    var match = re.exec(e['Message'])\u000a    if(match != null) e['ProcessId'] = parseInt(match[1]);\u000a    if(e[\"SourceProcessGUID\"]) e[\"SourceProcessGuid\"] = e[\"SourceProcessGUID\"]; \u000a    if(e[\"TargetProcessGUID\"]) e[\"TargetProcessGuid\"] = e[\"TargetProcessGUID\"]; \u000a  \u000a    // fix Sysmon bug here...\u000a}\u000a\u000a// DataFusion Process Monitor events\u000aif(e[\"SourceName\"] == \"DataFusionProcMon\"){\u000a    var classname = e['Class']; delete e['Class'];\u000a    var pm = db.command(\"INSERT INTO \"+ classname + \" CONTENT \" + JSON.stringify(e));\u000a    //print(pm[0].field('@rid'))\u000a\u0009return;\u000a}\u000a\u000a  \u000a// DataFusion UAT events\u000aif(e[\"SourceName\"] == \"DataFuseUserActions\"){\u000a    classname = 'UserActionTracking'\u000a    delete e['ProcessID']\u000a    try {\u000a        var uat = JSON.parse(e['Message'])\u000a    }\u000a    catch(err) {\u000a        print(Date() + ' Offending DataFuseUserActions ' + e['Message'])\u000a        print(logline)\u000a        db.command('INSERT INTO FailedJSON SET line = ?', logline)\u000a        return\u000a    }\u000a    for(var k in uat){\u000a        e[k] = uat[k]\u000a    }\u000a}\u000a\u000a// DataFusion network events v2\u000aif(e[\"SourceName\"] == \"DataFuseNetwork_v2\"){\u000a\u0009if(e['EventID']==3 || e['EventID']==4) {\u000a    \u0009var lp = db.command('UPDATE NetworkListeningPort set Count = Count + 1 \\\u000a                          UPSERT RETURN AFTER @rid, Count WHERE Hostname = ? AND TransportProtocol = ? \\\u000a                          AND LocalAddress = ? AND LocalPort = ? AND ProcessId = ? AND ProcessName = ?',\u000a                          e['Hostname'], e['TransportProtocol'], e['LocalAddress'], e['LocalPort'],e['ProcessId'],e['ProcessName'])\u000a              \u000a        if(lp[0].getProperty('Count') == 1){ // new listening port\u000a        \u0009//print('Found new listening port ' + e['LocalPort'] + ' for ' + e['Hostname'])\u000a            db.command('CREATE EDGE ListeningPortSighted FROM ? TO \\\u000a                      (SELECT FROM ProcessCreate WHERE Hostname = ? AND ProcessId = ? order by id desc LIMIT 1)'\u000a            \u0009\u0009  ,lp[0].getProperty('@rid'),e['Hostname'], e['ProcessId'])\u000a\u0009\u0009}\u0009\u000a    }\u000a  \u0009if(e['EventID']==1 || e['EventID']==2) {\u000a       print('network address found')\u000a       db.command('UPDATE NetworkAddress set Count = Count + 1 \\\u000a                    UPSERT RETURN AFTER @rid, Count WHERE Hostname = ? AND PhysicalAddress = ? AND IpAddress = ?',\u000a                    e['Hostname'], e['PhysicalAddress'],e['IpAddress'])\u000a    }\u000a    return; // no need to insert events since they come in every 3 seconds serving as heartbeat for DataFusion service.\u000a}\u000a\u000a\u000a//--Insert event------\u000aif(e['Message'] != null) delete e['Message'] //problematic for server-side parsing... it is repeated data anyway\u000a\u000aif(e['ParentImage'] == \"System\") {\u000a\u0009e['Sequence'] = 'System > smss.exe'\u000a}\u000a\u000avar jsonstring = JSON.stringify(e)\u000avar id = (new Date())*1\u000ajsonstring = jsonstring.slice(0,-1) + \",\\\"id\\\":\" + id + '}'\u000avar stmt = 'INSERT INTO '+ classname + ' CONTENT ' + jsonstring\u000avar r = null\u000aif(classname != 'ImageLoad') {\u000a    try {\u000a        r = db.command(stmt);\u000a    }\u000a    catch(err){\u000a        print(Date() + ' Error inserting ' + stmt)\u000a        db.command('INSERT INTO FailedJSON SET line = ?', logline)\u000a        return\u000a    }\u000a} else checkForeign(e, \"\", classname, stmt); //insert foreign DLL within checkForeign\u000a//--End insert event------\u000a\u000aswitch(classname) {\u000acase \"ProcessCreate\":\u000a        var current_id = r[0].getProperty('id')\u000a        if(e['ParentImage'] == \"System\") { //update SMSS.exe ID into cache table to find Type A (BeforeExplorer) process\u000a            print(Date() + \" Found \" + e['Image'] + \" on \" + e['Hostname'])\u000a            \u000a          \u0009db.command('UPDATE TypeA_id_cache SET smss_id = ? UPSERT \\\u000a                        WHERE Hostname = ?',r[0].getProperty('id'),e['Hostname'])\u000a        }\u000a        // update explorer.exe ID into cache table to find Type A (BeforeExplorer) process      \u000a        if(e['ParentImage'].indexOf(\"Windows\\\\System32\\\\userinit.exe\") > 0) {// explorer.exe\u000a            print(Date() + \" Found \" + e['Image'] + \" on \" + e['Hostname'])\u000a            db.command('UPDATE TypeA_id_cache SET explorer_id = ? UPSERT \\\u000a                        WHERE Hostname = ?',r[0].getProperty('id'),e['Hostname'])\u000a        }\u000a        \u000a        // ImageHashes tracking\u000a        var u = db.command('UPDATE ImageHashes set Count = Count + 1 \\\u000a                            UPSERT RETURN AFTER @rid, Count WHERE Image = ? AND Hashes = ?',\u000a                            e['Image'],e['Hashes'])\u000a        u = db.command('UPDATE ImageHashes set HashCount = HashCount + 1 \\\u000a                        RETURN AFTER @rid, Count, HashCount, BaseLined WHERE Hashes = ?',e['Hashes'])\u000a\u000a        var IHT_rid = u[0].getProperty('@rid')\u000a          \u000a    \u0009checkForeign(e, r[0].getProperty('@rid'), classname, \"\");\u000a    \u0009checkSpoof(e, r[0].getProperty('@rid'));\u000a    \u000a        // CommandLine tracking\u000a        u = db.command('UPDATE HostUserPrivilegeCommandLine set Count = Count + 1 \\\u000a                        UPSERT RETURN AFTER @rid, Count WHERE \\\u000a                        Hostname = ? AND User = ? AND CommandLine = ? AND IntegrityLevel = ?'\u000a                        ,e['Hostname'],e['User'],e['CommandLine'],e['IntegrityLevel'])\u000a    \u0009\u000a        var HUPC_rid = u[0].getProperty('@rid')\u000a\u0009    \u000a        // Check Process Type \u000a        var t = db.query('select from TypeA_id_cache Where Hostname = ?', e['Hostname'])\u000a    \u0009if(t.length > 0) {\u000a          if(current_id > t[0].getProperty('smss_id') && current_id > t[0].getProperty('explorer_id') \u000a             && t[0].getProperty('explorer_id') > t[0].getProperty('smss_id')) {\u000a              retry(\"db.command('CREATE EDGE PendingType from ? TO ?',HUPC_rid, r[0].getProperty('@rid'))\")\u000a          }\u000a          else {\u000a              retry(\"db.command('UPDATE ? SET ProcessType = ?', HUPC_rid,'BeforeExplorer')\")\u000a              retry(\"db.command('UPDATE ? SET ProcessType = ?', r[0].getProperty('@rid'),'BeforeExplorer')\")\u000a          }          \u000a        }\u000a        \u000a        // assign if any exact same commandline with existing score > 0\u000a        var score = db.query('select from commandlinecluster where Score > 0 AND CommandLine = ?',e['CommandLine'])\u000a    \u0009if(u[0].getProperty('Count') == 1 || score.length > 0) {  // note OR condition\u000a        \u0009retry(\"db.command('CREATE EDGE CommandLineSighted FROM ? TO ?',u[0].getProperty('@rid'),r[0].getProperty('@rid'))\")\u000a            retry(\"db.command('CREATE EDGE HasHashes FROM ? to ?', HUPC_rid, IHT_rid)\")                 \u000a        }\u000a    \u000a        break;\u000a\u000acase \"UserActionTracking\":\u000acase \"CreateRemoteThread\": //ID8  \u000acase \"DriverLoad\": //ID6\u000a       retry(\"db.command('INSERT INTO TriggerProcessing SET FunctionName = ?, rid = ?', classname, r[0].field('@rid'))\")\u000a       break;\u000a    \u000acase \"NetworkConnect\":       \u000a        var u = db.command('UPDATE NetworkDestinationPort set Count = Count + 1 \\\u000a                        UPSERT RETURN AFTER @rid, Count WHERE Image = ? AND \\\u000a                        Hostname = ? AND Port = ?',r[0].getProperty('Image'),r[0].getProperty('Hostname'),r[0].getProperty('DestinationPort'))\u000a        \u000a        if(u[0].getProperty('Count') == 1) { // new destination port sighted for that Process-Image\u000a        \u0009retry(\"db.command('CREATE EDGE DestinationPortSighted FROM ? TO ?',u[0].getProperty('@rid'),r[0].getProperty('@rid'))\")\u000a        } \u000a    \u0009// look for destination IP address that matches BUT NOT the current Hostname\u000a        var destination\u000a        if(r[0].field('DestinationHostname')) {\u000a            destination = db.query('SELECT FROM NetworkAddress WHERE Hostname = ? AND Hostname <> ?', r[0].field('DestinationHostname'),r[0].field('Hostname')) \u000a        }\u000a        else {\u000a            destination = db.query('SELECT FROM NetworkAddress WHERE IpAddress = ? AND Hostname <> ?', r[0].getProperty('DestinationIp'),r[0].field('Hostname')) \u000a        }\u000a        if(destination.length == 0) break;\u000a    \u000a    \u0009// find the target listening-port\u000a        var lateral = db.query('SELECT FROM listeningport WHERE Hostname = ? AND \\\u000a                        \u0009\u0009LocalPort = ?',destination[0].getProperty('Hostname'),r[0].getProperty('DestinationPort'))\u000a        if(lateral.length == 0) break;\u000a        retry(\"db.command('CREATE EDGE LateralCommunication FROM ? TO ?',r[0].getProperty('@rid'),lateral[0].getProperty('@rid'))\")\u000a        \u000a    \u0009// find the Process with that listening-port\u000a        var lpc = db.query('SELECT FROM ProcessCreate WHERE Hostname = ? AND ProcessId = ? \\\u000a                            AND Image.IndexOf(?) > -1 order by id desc LIMIT 1', \u000a                            lateral[0].getProperty('Hostname') ,lateral[0].getProperty('ProcessId'), lateral[0].getProperty('ProcessName'))\u000a        if(lpc.length == 0) break;\u000a    \u000a        // check for existing BoundTo edges\u000a\u0009\u0009var lateraledges = db.query('select from (select expand(in_BoundTo) from ?) where out = ? AND in = ?'\u000a        \u0009\u0009\u0009\u0009\u0009\u0009\u0009,lpc[0].getProperty('@rid'), lateral[0].getProperty('@rid'), lpc[0].getProperty('@rid'))\u000a        if(lateraledges.length == 0) { // avoid multiple BoundTo edges during repeated lateral communications\u000a        \u0009print('Adding BoundTo edge between ' + lateral[0].getProperty('@rid') + ' to ' + lpc[0].getProperty('@rid'))\u000a            db.command('CREATE EDGE BoundTo FROM ? TO ?', lateral[0].getProperty('@rid'), lpc[0].getProperty('@rid'))\u000a\u0009\u0009}\u000a\u0009\u000a        break;           \u000a}\u000a\u000areturn","name":"AddEvent","language":"javascript","parameters":["jsondata"]},{"@type":"d","@rid":"#6:6","@version":4,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar circularCheck = {} //each @rid should only be seen ONCE.\u000a\u000afunction findParent(n, s) { // start from leaf child node\u000a  if(circularCheck[n] === undefined) {\u000a     circularCheck[n] = 1\u000a  }\u000a  else {\u000a     print('circular path detected ' + n)\u000a  \u0009 return s + ' circular path'\u000a  }\u000a  var separator = s.length > 0 ? ' > ' : '';\u000a  var r = db.query('select from ' + n)\u000a  if(r.length == 0) return s; // no record, don't proceed\u000a  \u000a  // reached dead-end (circular path handled earlier)\u000a  if(r[0].getProperty('in_ParentOf') == null) {\u000a    var i = r[0].getProperty('Image').split(\"\\\\\")\u000a    if(r[0].getProperty('Image').indexOf('smss.exe') > 0) i[i.length-1] = 'System > ' + i[i.length-1]\u000a    return (i[i.length-1] + separator + s)      \u000a  }\u000a  //print('in_ParentOf RID = ' + r[0].getProperty('in_ParentOf'))\u000a  var p = db.query('select expand(out) from ' + r[0].getProperty('in_ParentOf').toString().replace('[','').replace(']',''))\u000a  var i = r[0].getProperty('Image').split(\"\\\\\")\u000a  return findParent(p[0].getProperty('@rid'), i[i.length-1] + separator + s);\u000a}\u000a\u000areturn findParent(startrid,'')\u000a","name":"GetParentOfSequence","language":"javascript","parameters":["startrid"]},{"@type":"d","@rid":"#6:7","@version":22,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar r = db.query('SELECT FROM #33:46860')\u000a\u000avar destination\u000aif(r[0].field('DestinationHostname')) {\u000a\u0009destination = db.query('SELECT FROM NetworkAddress WHERE Hostname = ? AND Hostname <> ?', r[0].field('DestinationHostname'),r[0].field('Hostname')) \u000a}\u000aelse {\u000a\u0009destination = db.query('SELECT FROM NetworkAddress WHERE IpAddress = ? AND Hostname <> ?', r[0].getProperty('DestinationIp'),r[0].field('Hostname')) \u000a}\u000a\u000aprint(destination.length)","name":"test","language":"javascript","parameters":null},{"@type":"d","@rid":"#6:9","@version":7,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000a\u000avar r = db.query('SELECT FROM ' + rid) // rid of ProcessCreate\u000adb.command('INSERT INTO Watchlist SET Hostname = ?, ProcessGuid = ?, rid = ?',r[0].getProperty('Hostname'),r[0].getProperty('ProcessGuid'), rid)\u000aprint('Added sequence to watchlist for ' + rid + ' ' + r[0].getProperty('Hostname') + ' ' +  r[0].getProperty('ProcessGuid'))","name":"AddSequenceWatchlist","language":"javascript","parameters":["rid"]},{"@type":"d","@rid":"#6:10","@version":66,"@class":"OFunction","idempotent":null,"code":"/*\u000a\u0009This is a Dynamic Hook function. Using console:\u000a    alter class parentof Superclass +OTriggered\u000a    alter class parentof CUSTOM onAfterCreate='UpdateSequence'\u000a*/\u000a\u000avar db = orient.getDatabase();\u000a\u000afunction linkSequenceToProcessCreate(sequenceRid) {\u000a  for(var i = 0; i < 3; i++){ //retry mechanism\u000a  \u0009try{ \u000a      db.command('CREATE EDGE SequenceSighted FROM ? TO ?', sequenceRid, doc.field('in').field('@rid'))\u000a      break;\u000a    }\u000a    catch(err){\u000a      if(err.indexOf('UPDATE') >= 0) continue;\u000a    }\u000a  }\u000a}\u000a\u000avar exename = doc.field('in').field('Image').split(\"\\\\\")\u000aexename = exename[exename.length - 1]\u000afor(var i = 0; i < 6; i++){ //retry mechanism\u000a  try{\u000a      var prevSeq = '' + doc.field('out').field('Sequence');\u000a      if(prevSeq.indexOf('System') < 0) {\u000a        print('Found partial sequence, attempt to fix: ' + prevSeq + ' from ' + doc.field('out').field('@rid'))\u000a        var ps = db.query('SELECT GetParentOfSequence(?) as seq', doc.field('out').field('@rid'))\u000a        prevSeq = ps[0].field('seq')\u000a        print('GetParentOfSequence found: ' + prevSeq + ' for ' + doc.field('out').field('@rid'))\u000a        if(prevSeq.indexOf('System') < 0) continue;\u000a        db.command('UPDATE ? SET Sequence = ? RETURN AFTER Sequence', doc.field('out').field('@rid'), prevSeq)\u000a      }\u000a      var s = db.command('UPDATE ? SET Sequence = ? RETURN AFTER Sequence', doc.field('in').field('@rid'),\u000a                \u0009\u0009\u0009prevSeq + ' > ' + exename) //updates ProcessCreate vertice\u000a      \u0009\u000a      var sc = db.command('UPDATE ParentOfSequence SET Count = Count + 1 \\\u000a      \u0009\u0009\u0009\u0009\u0009\u0009UPSERT RETURN AFTER @rid, Count, Score WHERE Sequence = ?',s[0].field('Sequence')) \u000a      \u000a      print(s[0].field('Sequence') + '|' + sc[0].field('Count'));\u000a      if(sc[0].field('Score') > 0 || sc[0].field('Count') == 1) linkSequenceToProcessCreate(sc[0].field('@rid'))\u000a    \u000a      break;\u000a  }\u000a  catch(err){\u000a    if(err.indexOf('UPDATE') >= 0) continue; \u000a  }\u000a}","name":"UpdateSequence","language":"javascript","parameters":null},{"@type":"d","@rid":"#6:12","@version":42,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar r = db.query(\"SELECT FROM \" + rid)\u000aif(r.length == 0) return\u000a\u000afunction retry(command){\u000a    try {\u000a        eval(command) \u000a    }\u000a    catch(err){\u000a        var e = '' + err\u000a        if(e.indexOf('UPDATE') > 0) {\u000a            print('Retrying ' + command)\u000a            retry(command)\u000a        }\u000a      \u0009else {\u000a          db.command('INSERT INTO Errors Set Command = ?, Message = ?',command, e)\u000a          print('Failed: ' + command + ' | Error: ' + e)\u000a       }\u000a    }\u000a}\u000a\u000a//print('DriverLoad found: ' + r[0].field('@rid'))\u000avar u = db.command('UPDATE ImageLoadedHashes set Count = Count + 1 \\\u000a                    UPSERT RETURN AFTER @rid, Count, BaseLined WHERE ImageLoaded = ? AND Hashes = ?', r[0].field('ImageLoaded'),r[0].field('Hashes'))\u000a        \u000aif(u[0].field('BaseLined') == false) {\u000a\u0009print(Date() + \"Sys First Sighting of \" + r[0].field('ImageLoaded'))\u000a    retry(\"db.command('CREATE EDGE SysSighted from ? TO ?', u[0].field('@rid'), r[0].field('@rid'))\")\u000a    retry(\"db.command('CREATE EDGE UsedAsDriver FROM (SELECT FROM FileCreate WHERE Hostname = ? AND TargetFilename in (SELECT DriverLoad FROM ?) order by id desc limit 1) TO ?',r[0].field('Hostname'),r[0].field('@rid'),r[0].field('@rid'))\")\u000a} \u000a\u000aretry(\"db.command('UPDATE \" + rid + \" SET ToBeProcessed = false')\")","name":"DriverLoad","language":"javascript","parameters":["rid"]},{"@type":"d","@rid":"#6:13","@version":11,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000a\u000atry {\u000a\u0009db.query(\"SELECT \" + doc.field('FunctionName') + \"(\" + doc.field('rid') + \")\");\u000a}\u000acatch(err) {\u000a    db.command('INSERT INTO Errors Set Command = ?, Message = ?', \"TriggerProcessing\", err)\u000a    print('Failed @ TriggerProcessing' + err)\u000a}","name":"TriggerProcessing","language":"javascript","parameters":null},{"@type":"d","@rid":"#6:14","@version":27,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar r = db.query(\"SELECT FROM \" + rid)\u000aif(r.length == 0) return\u000a\u000afunction retry(command){\u000a    try {\u000a        eval(command) \u000a    }\u000a    catch(err){\u000a        var e = '' + err\u000a        if(e.indexOf('UPDATE') > 0) {\u000a            print('Retrying ' + command)\u000a            retry(command)\u000a        }\u000a      \u0009else {\u000a          db.command('INSERT INTO Errors Set Command = ?, Message = ?',command, e)\u000a          print('Failed: ' + command + ' | Error: ' + e)\u000a       }\u000a    }\u000a}\u000a\u000a//print('Found ' + rid)\u000avar source = db.query('SELECT FROM index:ProcessGuidLookUp WHERE key = [?,?]', r[0].field('Hostname'), r[0].field('SourceProcessGuid'))\u000aif(source.length > 0) {\u000a\u0009//print('CreateRemoteThread Source found')\u000a    retry(\"db.command('CREATE EDGE CreatedThread FROM \" + source[0].field('rid').field('@rid') + \" TO \" + rid + \"')\")\u000a}\u000a\u000avar target = db.query('SELECT FROM index:ProcessGuidLookUp WHERE key = [?,?]', r[0].field('Hostname'), r[0].field('TargetProcessGuid'))\u000aif(target.length > 0) {\u000a\u0009//print('CreateRemoteThread Target found')\u000a    retry(\"db.command('CREATE EDGE RemoteThreadFor FROM \" + rid + \" TO \" + target[0].field('rid').field('@rid') + \"')\")\u000a}\u000a\u000aretry(\"db.command('UPDATE \"+ rid + \" SET ToBeProcessed = false')\")","name":"CreateRemoteThread","language":"javascript","parameters":["rid"]},{"@type":"d","@rid":"#6:15","@version":20,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar r = db.query(\"SELECT FROM \" + rid)\u000aif(r.length == 0) return\u000a\u000afunction retry(command){\u000a    try {\u000a        eval(command) \u000a    }\u000a    catch(err){\u000a        var e = '' + err\u000a        if(e.indexOf('UPDATE') > 0) {\u000a            print('Retrying ' + command)\u000a            retry(command)\u000a        }\u000a      \u0009else {\u000a          db.command('INSERT INTO Errors Set Command = ?, Message = ?',command, e)\u000a          print('Failed: ' + command + ' | Error: ' + e)\u000a       }\u000a    }\u000a}\u000a\u000a// track full-path-to-file AND Hashes\u000adb.command('UPDATE ImageLoadedHashes set Count = Count + 1 UPSERT RETURN AFTER \\\u000a\u0009\u0009   @rid, Count WHERE ImageLoaded = ? AND Hashes = ?',r[0].field('ImageLoaded'), r[0].field('Hashes') )\u000a\u000a// track ONLY Hashes        \u000adb.command('UPDATE ImageLoadedHashes set HashCount = HashCount + 1 \\\u000a            UPSERT RETURN AFTER @rid, HashCount, BaseLined WHERE Hashes = ?', r[0].field('Hashes') )\u000a\u000aretry(\"db.command('UPDATE \"+ rid + \" SET ToBeProcessed = false')\")\u000a","name":"ImageLoad","language":"javascript","parameters":["rid"]},{"@type":"d","@rid":"#6:16","@version":5,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar u = db.query(\"SELECT FROM \" + rid)\u000aif(u.length == 0) return\u000a\u000afunction retry(command){\u000a    try {\u000a        eval(command) \u000a    }\u000a    catch(err){\u000a        var e = '' + err\u000a        if(e.indexOf('UPDATE') > 0) {\u000a            print('Retrying ' + command)\u000a            retry(command)\u000a        }\u000a      \u0009else {\u000a          db.command('INSERT INTO Errors Set Command = ?, Message = ?',command, e)\u000a          print('Failed: ' + command + ' | Error: ' + e)\u000a       }\u000a    }\u000a}\u000a\u000avar ua = '' + u[0]\u000aif(ua.indexOf('Foreground Transition') > 0) {\u000a  //print('Foreground transit from ' + u[0].getProperty('@rid') + ' ' + u[0].getProperty('FromProcessId') + ' to ' +  u[0].getProperty('ToProcessId'));\u000a\u000a  retry(\"db.command('CREATE EDGE SwitchedFrom FROM (SELECT FROM ProcessCreate WHERE ProcessId = ? AND Hostname = ? Order By id Desc Limit 1) TO ?',u[0].getProperty('FromProcessId'),u[0].getProperty('Hostname'),u[0].getProperty('@rid'))\")\u000a              \u000a    retry(\"db.command('CREATE EDGE SwitchedTo FROM ? TO (SELECT FROM ProcessCreate WHERE ProcessId = ? AND Hostname = ? Order By id Desc  LIMIT 1)',u[0].getProperty('@rid'),u[0].getProperty('ToProcessId'),u[0].getProperty('Hostname'))\")\u000a             \u000a}\u000aelse { // Click, MouseMove, Enter...\u000a    var pc = db.query('SELECT FROM ProcessCreate WHERE Hostname = ? AND ProcessId = ? Order By id Desc LIMIT 1',\u000a                           u[0].getProperty('Hostname'),u[0].getProperty('ProcessId'))\u000a    if(pc.length == 0) {\u000a    \u0009//print('LinkUAT ProcessCreate not found for ' + u[0].getProperty('ProcessId'))\u000a        return //means somehow ProcessCreate was missing.\u000a\u0009}\u000a    retry(\"db.command('CREATE EDGE ActedOn FROM ? TO ?',u[0].getProperty('@rid'),pc[0].getProperty('@rid'))\")\u000a    if(ua.indexOf('Click') > 0 || ua.indexOf('Press')) {\u000a        var checkPendingType = '' + pc[0]\u000a\u0009\u0009if(checkPendingType.indexOf('in_PendingType:[]') < 0 && checkPendingType.indexOf('in_PendingType') > 0){\u000a        \u0009retry(\"db.command('UPDATE ? SET ProcessType = ?', pc[0].getProperty('@rid'),'AfterExplorerForeground')\")\u000a            //print(\"Set ProcessType to AfterExplorerFG for \" + pc[0].getProperty('CommandLine'))\u000a            retry(\"db.command('DELETE EDGE ' + pc[0].getProperty('in_PendingType'))\")\u000a        }\u000a       if(pc[0].getProperty('ProcessType') == 'AfterExplorerBackground'){ // to correct if mislabelled\u000a         \u0009retry(\"db.command('UPDATE ? SET ProcessType = ?', pc[0].getProperty('@rid'),'AfterExplorerForeground')\")\u000a            //print(\"Set ProcessType to AfterExplorerFG for \" + pc[0].getProperty('CommandLine'))\u000a       }\u000a    }\u000a}\u000aretry(\"db.command('UPDATE \" + rid + \" SET ToBeProcessed = false')\") ","name":"UserActionTracking","language":"javascript","parameters":["rid"]}]}