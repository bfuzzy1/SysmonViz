{"records":[{"@type":"d","@rid":"#6:0","@version":15,"@class":"OFunction","idempotent":false,"code":"var db = orient.getDatabase();\u000a\u000a// EventId to Classname\u000avar eventIdLookup = {1:'ProcessCreate', 2:'FileCreateTime', 3:'NetworkConnect', \u000a                    4:'SysmonStatus', 5:'ProcessTerminate',6:'DriverLoad', \u000a                    7:'ImageLoad', 8:'CreateRemoteThread', 9:'RawAccessRead', \u000a                    10:'ProcessAccess', 11:'FileCreate', 12:'RegistryEvent', \u000a                    13:'RegistryEvent', 14:'RegistryEvent', 15:'FileCreateStreamHash', \u000a                    16:'ConfigChanged', 17:'PipeCreated', 18:'PipeConnected', \u000a                    19:'WmiEvent', 20:'WmiEvent', 21:'WmiEvent', 255:'Error' }\u000a\u000a// find whitespace in key string; {key,value} database property name won't accept space\u000afunction removeSpaceFromKey(obj) {\u000a  var notValid = /[\\W_]+/g \u000a  if (typeof obj !== \"object\") return obj;\u000a  for (var prop in obj) {\u000a      if (obj.hasOwnProperty(prop)) {\u000a          obj[prop.replace(notValid, \"\")] = removeSpaceFromKey(obj[prop]);\u000a          if (notValid.test(prop)) {\u000a              delete obj[prop];\u000a          }\u000a      }\u000a  }\u000a  return obj;\u000a}                       \u000a\u000afunction retry(command){\u000a    try {\u000a        eval(command) \u000a    }\u000a    catch(err){\u000a        var e = '' + err\u000a        if(e.indexOf('UPDATE') > 0) {\u000a            print('Retrying ' + command)\u000a            retry(command)\u000a        }\u000a      \u0009else {\u000a          db.command('INSERT INTO Errors Set Command = ?, Message = ?',command, e)\u000a          print('Failed: ' + command + ' | Error: ' + e)\u000a       }\u000a    }\u000a}\u000a\u000avar logline = unescape(jsondata)\u000avar e = null\u000atry {\u000a  e = removeSpaceFromKey(JSON.parse(logline)); \u000a}\u000acatch(err) {\u000a   print(Date() + ' Offending line ' + logline);\u000a   db.command('INSERT INTO FailedJSON SET line = ?', logline)\u000a   return\u000a}\u000a\u000ae['ToBeProcessed'] = true\u000aclassname = 'WinEvent' // default class if can't figure out which class later\u000a\u000a// This Keywords field is a huge negative number that breaks record insertion\u000aif(e['Keywords'] != undefined) {\u000a    e['Keywords'] = '' + e['Keywords'] // turn it to string\u000a}\u000a\u000a// Pre-process Sysmon events\u000aif(e[\"SourceName\"] == \"Microsoft-Windows-Sysmon\"){\u000a    classname = eventIdLookup[e['EventID']]\u000a    e['SysmonProcessId'] = e['ProcessID']\u000a    delete e['ProcessID']\u000a    var re = /ProcessId: (\\d+)/g\u000a    var match = re.exec(e['Message'])\u000a    if(match != null) e['ProcessId'] = parseInt(match[1]);\u000a    if(e[\"SourceProcessGUID\"]) e[\"SourceProcessGuid\"] = e[\"SourceProcessGUID\"]; \u000a    if(e[\"TargetProcessGUID\"]) e[\"TargetProcessGuid\"] = e[\"TargetProcessGUID\"]; \u000a  \u000a    // fix Sysmon bug: wrong ParentImage, ParentProcessGuid, ParentCommandLine due to later process reusing same ProcessId as terminated smss.exe\u000a  \u0009if(classname == 'ProcessCreate') {\u000a       if(e['ParentImage'].indexOf('svchost.exe') > 0 && (e['Image'].indexOf('wininit.exe') > 0 || e['Image'].indexOf('csrss.exe') > 0)) {\u000a       \u0009  print('')\u000a          print('Sysmon bug found! ' + e['Image'])\u000a       \u0009  print('')         \u000a          var parent = db.query(\"select from pc Where ParentImage like '%smss.exe' AND \\\u000a\u0009\u0009\u0009\u0009\u0009\u0009\u0009\u0009Image like '%smss.exe' AND ProcessId = ? order by id desc limit 1\", e['ParentProcessId'])\u000a          if(parent.length > 0) {\u000a             print('Found CORRECT parent process')\u000a             e['ParentImage'] = parent[0].field('Image')\u000a             e['ParentCommandLine'] = parent[0].field('CommandLine')\u000a             e['ParentProcessGuid'] = parent[0].field('ProcessGuid')\u000a          }\u000a       }\u000a    }\u000a}\u000a  \u000aif(e['Message'] != null) delete e['Message'] //problematic for server-side parsing... it is repeated data anyway\u000a\u000aif(e['ParentImage'] == \"System\") { // for building parentOf-sequence; see UpdateSequence function \u000a\u0009e['Sequence'] = 'System > smss.exe'\u000a    e['ToBeProcessed'] = false\u000a}\u000a\u000a//--Insert event------\u000avar jsonstring = JSON.stringify(e)\u000avar id = (new Date())*1\u000ajsonstring = jsonstring.slice(0,-1) + \",\\\"id\\\":\" + id + '}'\u000avar stmt = 'INSERT INTO '+ classname + ' CONTENT ' + jsonstring\u000avar r = null\u000atry { r = db.command(stmt); }\u000acatch(err){\u000a    print(Date() + ' Error inserting ' + stmt)\u000a    db.command('INSERT INTO FailedJSON SET line = ?', logline)\u000a    return\u000a}\u000a//--End insert event------\u000a\u000a// Why not Dynamic Hook Trigger function like onAfterCreate? Because there's no committed RID\u000a// This indirect technique pass the RID of the inserted event to respective functions asynchronously \u000a\u000aswitch(classname) { // post-insertion processing...\u000a\u000acase \"ImageLoad\":\u000acase \"ProcessTerminate\":     \u0009\u000acase \"PipeCreated\":\u0009    \u0009\u000acase \"PipeConnected\":   \u000acase \"RawAccessRead\":   \u000acase \"FileCreateTime\":  \u0009\u000acase \"FileCreate\": \u0009     \u000acase \"FileCreateStreamHash\":     \u000acase \"RegistryEvent\":   \u000acase \"NetworkConnect\":\u000a        retry(\"db.command('INSERT INTO TriggerProcessing SET FunctionName = ?, rid = ?', 'ConnectToProcessCreate', r[0].field('@rid'))\")\u000a    \u0009break;\u000a\u000a//case \"UserActionTracking\":\u000acase \"CreateRemoteThread\": //ID8  \u000a       retry(\"db.command('INSERT INTO TriggerProcessing SET FunctionName = ?, rid = ?', classname, r[0].field('@rid'))\")\u000a       break;        \u000a}\u000a\u000areturn","name":"AddEvent","language":"javascript","parameters":["jsondata"]},{"@type":"d","@rid":"#6:1","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar circularCheck = {} //each @rid should only be seen ONCE.\u000a\u000afunction findParent(n, s) { // start from leaf child node\u000a  if(circularCheck[n] === undefined) {\u000a     circularCheck[n] = 1\u000a  }\u000a  else {\u000a     print('circular path detected ' + n)\u000a  \u0009 return s + ' circular path'\u000a  }\u000a  var separator = s.length > 0 ? ' > ' : '';\u000a  var r = db.query('select from ' + n)\u000a  if(r.length == 0) return s; // no record, don't proceed\u000a  \u000a  // reached dead-end (circular path handled earlier)\u000a  if(r[0].getProperty('in_ParentOf') == null) {\u000a    var i = r[0].getProperty('Image').split(\"\\\\\")\u000a    if(r[0].getProperty('Image').indexOf('smss.exe') > 0) i[i.length-1] = 'System > ' + i[i.length-1]\u000a    return (i[i.length-1] + separator + s)      \u000a  }\u000a  //print('in_ParentOf RID = ' + r[0].getProperty('in_ParentOf'))\u000a  var p = db.query('select expand(out) from ' + r[0].getProperty('in_ParentOf').toString().replace('[','').replace(']',''))\u000a  var i = r[0].getProperty('Image').split(\"\\\\\")\u000a  return findParent(p[0].getProperty('@rid'), i[i.length-1] + separator + s);\u000a}\u000a\u000areturn findParent(startrid,'')\u000a","name":"GetParentOfSequence","language":"javascript","parameters":["startrid"]},{"@type":"d","@rid":"#6:2","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar r = db.query(\"select from pc where NOT Sequence.indexOf('System') == 0 AND in_ParentOf.size() > 0 order by id asc\")\u000aif(r.length == 0) return\u000a\u000aprint(r.length) \u000a\u000afor(var i = 0; i < r.length; i++) {\u000a\u0009var ps = db.query('SELECT GetParentOfSequence(?) as seq', r[i].field('@rid'))\u000a    if(ps.length == 0) continue\u000a    print(ps[0].field('seq') + ' for ' + r[i].field('@rid') )\u000a}","name":"test","language":"javascript","parameters":null},{"@type":"d","@rid":"#6:4","@version":1,"@class":"OFunction","idempotent":null,"code":"/*\u000a\u0009This is a Dynamic Hook function. Using console:\u000a    alter class parentof Superclass +OTriggered\u000a    alter class parentof CUSTOM onAfterCreate='UpdateSequence'\u000a*/\u000a\u000avar db = orient.getDatabase();\u000a\u000afunction retry(command){\u000a    try {\u000a        eval(command) \u000a    }\u000a    catch(err){\u000a        var e = '' + err\u000a        if(e.indexOf('UPDATE') > 0) {\u000a            print('Retrying ' + command)\u000a            retry(command)\u000a        }\u000a      \u0009else {\u000a          db.command('INSERT INTO Errors Set Command = ?, Message = ?',command, e)\u000a          print('Failed: ' + command + ' | Error: ' + e)\u000a       }\u000a    }\u000a}\u000a\u000afunction linkSequenceToProcessCreate(sequenceRid) {\u000a  for(var i = 0; i < 3; i++){ //retry mechanism\u000a  \u0009try{ \u000a      db.command('CREATE EDGE SequenceSighted FROM ? TO ?', sequenceRid, doc.field('in').field('@rid'))\u000a      break;\u000a    }\u000a    catch(err){\u000a      if(err.indexOf('UPDATE') >= 0) continue;\u000a    }\u000a  }\u000a}\u000a\u000afunction fixSequence(prevSeq){\u000a\u0009print('Found partial sequence, attempt to fix: ' + prevSeq + ' from ' + doc.field('in').field('@rid'))                  \u000a    for(var i = 0; i < 3; i++) {\u000a      var ps = db.query('SELECT GetParentOfSequence(?) as seq', doc.field('out').field('@rid'))\u000a      prevSeq = ps[0].field('seq')\u000a      if(prevSeq == null || ( doc.field('in').field('Image').indexOf('smss.exe') < 0 \u000a          && doc.field('in').field('Image').indexOf('autochk.exe') < 0 && prevSeq.indexOf('System > smss.exe > smss.exe') < 0)) continue;\u000a\u000a      //found valid sequence\u000a      db.command('UPDATE ? SET Sequence = ? RETURN AFTER Sequence', doc.field('out').field('@rid'), prevSeq)\u000a      print('GetParentOfSequence found: ' + prevSeq + ' for ' + doc.field('in').field('@rid'))\u0009\u000a      return prevSeq\u000a    }\u000a    var parentEXE = doc.field('out').field('Image').split(\"\\\\\")\u000a\u0009parentEXE = parentEXE[parentEXE.length - 1]\u000a    var childEXE = doc.field('in').field('Image').split(\"\\\\\")\u000a\u0009childEXE = childEXE[childEXE.length - 1]\u000a    var partialSeq = parentEXE + ' > ' + childEXE\u000a    //print(partialSeq)\u000a    var seq = db.query('SELECT Sequence from seq WHERE Sequence like \"%' + partialSeq + '\"')\u000a    if(seq.length > 0) return seq[0].field('Sequence').replace(' > ' + childEXE, \"\")\u000a    return parentEXE\u000a}\u000a\u000avar exename = doc.field('in').field('Image').split(\"\\\\\")\u000aexename = exename[exename.length - 1]\u000a\u000afor(var i = 0; i < 3; i++){ //retry mechanism\u000a  try{\u000a      var prevSeq = '' + doc.field('out').field('Sequence');        // fix broken sequence if any\u000a      if(prevSeq == null || ( doc.field('in').field('Image').indexOf('smss.exe') < 0 \u000a         && doc.field('in').field('Image').indexOf('autochk.exe') < 0 && prevSeq.indexOf('System > smss.exe > smss.exe') < 0)) {\u000a          prevSeq = fixSequence(prevSeq)\u000a      }\u000a      var sql = 'UPDATE ' + doc.field('in').field('@rid') + ' SET Sequence = \"'+prevSeq + ' > ' + exename+'\" RETURN AFTER Sequence'\u000a      retry(\"db.command('\" + sql + \"')\")\u0009\u000a      var sc = db.command('UPDATE seq SET Count = Count + 1 UPSERT RETURN AFTER @rid, Count, Score WHERE Sequence = ?',prevSeq+' > '+exename) \u000a      \u000a      if(sc[0].field('Score') > 0 || sc[0].field('Count') == 1) linkSequenceToProcessCreate(sc[0].field('@rid'))\u000a      print(doc.field('in').field('Hostname') + ':' + prevSeq + ' > ' + exename + '|' + sc[0].field('Count'));\u000a      break;\u000a  }\u000a  catch(err){\u000a    if(err.indexOf('UPDATE') >= 0) continue; \u000a  }\u000a}","name":"UpdateSequence","language":"javascript","parameters":null},{"@type":"d","@rid":"#6:6","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000a\u000atry {\u000a\u0009db.query(\"SELECT \" + doc.field('FunctionName') + \"(\" + doc.field('rid') + \")\");\u000a}\u000acatch(err) {\u000a    db.command('INSERT INTO Errors Set Command = ?, Message = ?', \"TriggerProcessing\", err)\u000a    print('Failed @ TriggerProcessing' + err)\u000a}","name":"TriggerProcessing","language":"javascript","parameters":null},{"@type":"d","@rid":"#6:7","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar r = db.query(\"SELECT FROM \" + rid)\u000aif(r.length == 0) return\u000a\u000afunction retry(command){\u000a    try {\u000a        eval(command) \u000a    }\u000a    catch(err){\u000a        var e = '' + err\u000a        if(e.indexOf('UPDATE') > 0) {\u000a            print('Retrying ' + command)\u000a            retry(command)\u000a        }\u000a      \u0009else {\u000a          db.command('INSERT INTO Errors Set Command = ?, Message = ?',command, e)\u000a          print('Failed: ' + command + ' | Error: ' + e)\u000a       }\u000a    }\u000a}\u000a\u000a//print('Found ' + rid)\u000avar source = db.query('SELECT FROM index:ProcessGuidLookUp WHERE key = [?,?]', r[0].field('Hostname'), r[0].field('SourceProcessGuid'))\u000aif(source.length > 0) {\u000a\u0009//print('CreateRemoteThread Source found')\u000a    retry(\"db.command('CREATE EDGE CreatedThread FROM \" + source[0].field('rid').field('@rid') + \" TO \" + rid + \"')\")\u000a}\u000a\u000avar target = db.query('SELECT FROM index:ProcessGuidLookUp WHERE key = [?,?]', r[0].field('Hostname'), r[0].field('TargetProcessGuid'))\u000aif(target.length > 0) {\u000a\u0009//print('CreateRemoteThread Target found')\u000a    retry(\"db.command('CREATE EDGE RemoteThreadFor FROM \" + rid + \" TO \" + target[0].field('rid').field('@rid') + \"')\")\u000a}\u000a\u000aretry(\"db.command('UPDATE \"+ rid + \" SET ToBeProcessed = false')\")","name":"CreateRemoteThread","language":"javascript","parameters":["rid"]},{"@type":"d","@rid":"#6:10","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar r = db.query(\"SELECT FROM \" + rid)\u000aif(r.length == 0) return\u000a\u000afunction retry(command){\u000a    try {\u000a        eval(command) \u000a    }\u000a    catch(err){\u000a        var e = '' + err\u000a        if(e.indexOf('UPDATE') > 0) {\u000a            print('Retrying ' + command)\u000a            retry(command)\u000a        }\u000a      \u0009else {\u000a          db.command('INSERT INTO Errors Set Command = ?, Message = ?',command, e)\u000a          print('Failed: ' + command + ' | Error: ' + e)\u000a       }\u000a    }\u000a}\u000a\u000avar edgeLookup = {'ProcessTerminate':'Terminated', 'PipeCreated':'CreatedPipe',\u000a                'PipeConnected':'ConnectedPipe', 'RawAccessRead':'RawRead',\u000a                'FileCreateTime':'ChangedFileCreateTime', 'FileCreate':'CreatedFile',\u000a                'FileCreateStreamHash':'CreatedFileStream', 'RegistryEvent':'AccessedRegistry',\u000a                'NetworkConnect':'ConnectedTo', 'ImageLoad':'LoadedImage'}\u000a\u000avar pc = db.query('SELECT expand(rid) FROM index:ProcessGuidLookUp where key = [?,?]', r[0].field('Hostname'), r[0].field('ProcessGuid'))\u000aretry(\"db.command('UPDATE \"+ rid + \" SET ToBeProcessed = false')\") // at this point regardless ProcessCreate exist or not, the non-ProcessCreate is processed\u000aif(pc.length == 0) return\u000avar sql = 'CREATE EDGE ' + edgeLookup[r[0].field('@class')] + ' FROM ' + pc[0].field('@rid') + ' TO ' + rid\u000aretry(\"db.command('\" + sql + \"')\")\u000a//print(edgeLookup[r[0].field('@class')])","name":"ConnectToProcessCreate","language":"javascript","parameters":["rid"]},{"@type":"d","@rid":"#6:11","@version":1,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000avar r = db.query('select from (select from pc where ToBeProcessed=true order by id asc limit 100) order by Hostname asc, RecordNumber asc')\u000a\u000afunction retry(command){\u000a    try {\u000a        eval(command) \u000a    }\u000a    catch(err){\u000a        var e = '' + err\u000a        if(e.indexOf('UPDATE') > 0) {\u000a            print('Retrying ' + command)\u000a            retry(command)\u000a        }\u000a      \u0009else {\u000a          db.command('INSERT INTO Errors Set Command = ?, Message = ?',command, e)\u000a          print('Failed: ' + command + ' | Error: ' + e)\u000a       }\u000a    }\u000a}\u000a\u000afunction handleRetry(child_rid){\u000a\u0009print('set retry for ' + child_rid)\u000a    try {\u000a    \u0009var c = db.command('UPDATE ? SET ParentRetry = ParentRetry + 1 RETURN AFTER ParentRetry', child_rid)\u000a      \u0009if(c[0].field('ParentRetry') > 2) {\u000a            retry(\"db.command('\"+'UPDATE '+child_rid+' SET ToBeProcessed = false'+\"')\")\u000a         \u0009return true  // done retrying       \u0009\u000a      \u0009}\u000a      \u0009else {\u000a        \u0009print('retried ' + c[0].field('ParentRetry'))\u000a         \u0009return false // for retrying\u000a      \u0009}\u0009\u000a    }\u000a    catch(err) {\u000a\u0009\u0009var e = '' + err\u000a        if(e.indexOf('UPDATE') > 0) {\u000a        \u0009print('Retrying connectParent for ' + child_rid)\u000a            handleRetry(child_rid)\u000a        }\u000a        else {\u000a        \u0009print('handleRetry Failed: ' + e)\u000a            db.command('INSERT INTO Errors Set Message = ?', e)\u000a        }\u000a    }\u000a}\u000a\u000a// used when retry complete still no parent\u000afunction recoverSeq(child) {\u000a    var parentEXE = child.field('ParentImage').split(\"\\\\\")\u000a\u0009parentEXE = parentEXE[parentEXE.length - 1]\u000a    var childEXE = child.field('Image').split(\"\\\\\")\u000a\u0009childEXE = childEXE[childEXE.length - 1]\u000a    var partialSeq = parentEXE + ' > ' + childEXE\u000a    var seq = db.command('UPDATE seq SET Count = Count + 1 UPSERT RETURN AFTER @rid, Sequence, Count, Score \\\u000a\u0009\u0009\u0009\u0009\u0009\u0009  WHERE Sequence like \"%' + partialSeq + '\"')\u000a    if(seq.length == 0) return true\u000a    print(child.field('Hostname') + \"|\" + seq[0].field('Sequence'))\u000a    var sql = 'UPDATE ' + child.field('@rid') + ' SET Sequence = \"'+seq[0].field('Sequence')+'\"'\u000a    retry(\"db.command('\" + sql + \"')\")\u000a    if(seq[0].field('Score') > 0 || seq[0].field('Count') == 1) {\u000a        sql = 'CREATE EDGE SequenceSighted FROM ' + seq[0].field('@rid') + ' TO ' + child.field('@rid')\u000a        retry(\"db.command('\" + sql + \"')\")\u000a        print('Sequence sighted in recoverSeq, linked '  + seq[0].field('@rid') + ' TO ' + child.field('@rid'))      \u000a    }\u000a\u0009return true\u000a}\u000a\u000afunction connectParent(child) {\u000a\u0009var parent = db.query('SELECT expand(rid) FROM index:ProcessGuidLookUp where key = [?,?]', \u000a                          child.field('Hostname'), child.field('ParentProcessGuid'))\u000a    if(parent.length > 0) {\u000a\u0009\u0009parent = parent[0]\u000a        if(parent.field('Sequence') == null) {\u000a            if( handleRetry(child.field('@rid')) == false) return false\u000a        }\u000a        retry(\"db.command('\"+'CREATE EDGE ParentOf from '+parent.field('@rid')+' TO '+child.field('@rid')+\"')\")\u000a\u0009\u0009retry(\"db.command('\"+'UPDATE '+child.field('@rid')+' SET ToBeProcessed = false'+\"')\")\u000a        return true   \u000a    }\u000a  \u0009else {\u000a       if(handleRetry(child.field('@rid')) == false) return false\u000a       else return recoverSeq(child) \u000a    } \u000a}\u000a\u000afor(var i = 0; i < r.length; i++){ \u000a\u0009if(connectParent(r[i]) == false) break;\u000a}","name":"ConnectParentProcess","language":"javascript","parameters":[]},{"@type":"d","@rid":"#6:15","@version":2,"@class":"OFunction","idempotent":null,"code":"var db = orient.getDatabase();\u000a\u000a// ConnectParentProcess links child to parent process\u000adb.command('DELETE FROM oschedule WHERE name = \"ConnectParentEvent\"')\u000adb.command(\"INSERT INTO oschedule  SET name = 'ConnectParentEvent', \\\u000a\u0009\u0009\u0009function = (SELECT FROM ofunction WHERE name = 'ConnectParentProcess'), rule = '0/1 * * * * ?'\")","name":"RestartTimers","language":"javascript","parameters":null}]}